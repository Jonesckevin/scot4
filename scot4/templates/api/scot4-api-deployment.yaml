apiVersion: v1
kind: Service
metadata:
  name: scot4-api-service
spec:
  ports:
  - port: {{ .Values.scot4.api.containerPort }}
  selector:
    app: scot4-api
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: scot4-api-pv-claim
  annotations:
    volumeType: local
    helm.sh/resource-policy: "keep"
spec:
  storageClassName: {{ .Values.scot4.api.storageClassName }}
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: {{ .Values.scot4.api.storageCapacity }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: scot4-api
spec:
  replicas: {{ .Values.scot4.api.numReplicas }}
  selector:
    matchLabels:
      app: scot4-api
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: {{ .Values.scot4.api.maxSurge }}
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: scot4-api
        date: "{{ now | unixEpoch }}"
    spec:
      initContainers:
      {{- if eq .Values.scot4.api.internalDB "true" }}
      - name: scot4-wait-for-db
        image: "{{ .Values.scot4.api.repository }}:{{ .Values.scot4.api.tag }}"
        imagePullPolicy: {{ .Values.scot4.api.imagePullPolicy }}
        command: ['/bin/bash', '-c', 'echo -e "Checking for the availability of MySQL Server deployment"; while ! mysqladmin ping -h scot4-db-service -u root -p$ROOT_DB_PASSWORD; do sleep 1; printf "-"; done; echo -e "  >> MySQL DB Server has started";']
        env:
          - name: ROOT_DB_PASSWORD
            valueFrom:
              secretKeyRef:
                name: scot4-env-secrets
                key: ROOT_DB_PASSWORD
      {{- end }}
      {{- if eq .Values.scot4.rebuild_api_database_tables "true" }}
      - name: scot4-api-create-new-tables
        imagePullPolicy: {{ .Values.scot4.api.imagePullPolicy }}
        image: "{{ .Values.scot4.api.repository }}:{{ .Values.scot4.api.tag }}"
        command: ["python", "./app/db/init_db.py", "--create_tables"]
        envFrom:
        - configMapRef:
            name: scot4-api-env-config
        - secretRef:
            name: scot4-env-secrets
      {{- end }}
      containers:
      - image: "{{ .Values.scot4.api.repository }}:{{ .Values.scot4.api.tag }}"
        imagePullPolicy: {{ .Values.scot4.api.imagePullPolicy }}
        name: scot4-api
        envFrom:
        - configMapRef:
            name: scot4-api-env-config
        - secretRef:
            name: scot4-env-secrets
        command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "{{ .Values.scot4.api.containerPort }}"]
        volumeMounts:
        - name: scot4-api-files-storage
          mountPath: /var/scot_files
          readOnly: false
        ports:
        - containerPort: {{ .Values.scot4.api.containerPort }}
          name: scot4-api
        readinessProbe:
          httpGet:
            path: /api/v1/health/
            port: {{ .Values.scot4.api.containerPort }}
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /api/v1/health/
            port: {{ .Values.scot4.api.containerPort }}
          initialDelaySeconds: 30
          periodSeconds: 10
          failureThreshold: 10
        resources:
          requests:
            memory: "4096Mi"
          limits:
            memory: "8192Mi"
      volumes:
      - name: scot4-api-files-storage
        persistentVolumeClaim:
          claimName: scot4-api-pv-claim
      securityContext:
        runAsUser: 3000
        runAsGroup: 3000
        fsGroup: 3000
      {{- if .Values.scot4.common.imagePullSecret }}
      imagePullSecrets:
      - name: {{ .Values.scot4.common.imagePullSecret }}
      {{- end }}
